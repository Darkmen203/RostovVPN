name: Build
on:
  workflow_call:
    inputs:
      upload-artifact:
        type: boolean
        default: true
      tag-name:
        type: string
        default: "draft"
      channel:
        type: string
        default: "dev"

env:
  IS_GITHUB_ACTIONS: 1
  CHANNEL: "${{ inputs.channel }}"
  FLUTTER_VERSION: '3.24.0'
  NDK_VERSION: r26d
  UPLOAD_ARTIFACT: "${{ inputs.upload-artifact }}"
  TAG_NAME: "${{ inputs.tag-name }}"
  TARGET_NAME_AppImage: "RostovVPN-Linux-x64"
  TARGET_NAME_deb: "RostovVPN-Debian-x64"
  TARGET_NAME_rpm: "RostovVPN-rpm-x64"
  TARGET_NAME_apk: "RostovVPN-Android"
  TARGET_NAME_aab: "RostovVPN-Android"
  #TARGET_NAME_exe: "RostovVPN-Windows-x64"
  TARGET_NAME_dmg: "RostovVPN-MacOS"
  TARGET_NAME_pkg: "RostovVPN-MacOS-Installer"
  TARGET_NAME_ipa: "RostovVPN-iOS"
  

jobs:
  test:
    outputs:
      draftBuildCode: ${{ steps.draftBuildCode.outputs.datetime }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2.16.0 #issue with 2.13
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Install SQLite
        run: sudo apt-get install sqlite3 libsqlite3-dev
      - name: Prepare
        env:
            API_TOKEN: ${{ secrets.API_TOKEN }}
            API_URL: ${{ secrets.API_URL }}
        run: make linux-prepare
      - name: Test
        env:
            API_TOKEN: ${{ secrets.API_TOKEN }}
            API_URL: ${{ secrets.API_URL }}
        run: flutter test

      - name: make draftBuildCode
        id: draftBuildCode
        run: echo "::set-output name=datetime::$(date +'%d.%H.%M')"


  build:
    needs: test
    permissions: write-all
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: android-apk
            os: ubuntu-latest
            targets: apk

          - platform: android-aab
            os: ubuntu-latest
            targets: aab

          - platform: windows
            os: windows-2022
            aarch: amd64
            targets: exe
            # targets: exe,msix # uncomment to build msix

          - platform: linux
            os: ubuntu-22.04
            aarch: amd64
            targets: AppImage,deb,rpm

          - platform: macos
            os: macos-13
            aarch: universal
            targets: dmg,pkg
            
          # - platform: ios
          #   os: macos-14
          #   aarch: universal
          #   filename: rostovvpn-ios
          #   targets: ipa
    runs-on: ${{ matrix.os }}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      # - name: Import Apple Codesign Certificates
      #   if: ${{ inputs.upload-artifact && startsWith(matrix.os,'macos') }}
      #   uses: apple-actions/import-codesign-certs@v3
      #   with: 
      #       p12-file-base64: "${{ secrets.APPLE_CERTIFICATE_P12 }}"
      #       p12-password: "${{ secrets.APPLE_CERTIFICATE_P12_PASSWORD }}"

      # - name: Import Apple Mobile Provisioning Profile
      #   if: ${{ inputs.upload-artifact && startsWith(matrix.os,'macos') }}
      #   run: |
      #      mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
      #      echo "${{secrets.APPLE_MOBILE_PROVISIONING_PROFILES_TARGZ_BASE64}}"|base64 --decode | tar xz -C ~/Library/MobileDevice/Provisioning\ Profiles
      #      ls ~/Library/MobileDevice/Provisioning\ Profiles
      #   #   ls ~/Library/MobileDevice/Provisioning\ Profiles
      #   #   echo "${{secrets.NEW_APPLE_MOBILE_PROVISIONING_PROFILES_TARXZ_BASE64}}"|base64 --decode | tar xJ -C ~/Library/MobileDevice/Provisioning\ Profiles
      #   #   # echo "${{secrets.NEW_APPLE_MOBILE_PROVISIONING_PROFILES_TARGZ_BASE64_2}}"|base64 --decode | tar xz -C ~/Library/MobileDevice/Provisioning\ Profiles
          


      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2.16.0 #issue with 2.13
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          # flutter-version-file: pubspec.yaml
          channel: 'stable'
          cache: true

      
      - name: Setup Java
        if: startsWith(matrix.platform,'android')
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 17
      - name: Setup NDK
        if: startsWith(matrix.platform,'android')
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: ${{ env.NDK_VERSION }}
          add-to-path: true
          link-to-sdk: true

      - name: Setup Gradle 8.1
        if: startsWith(matrix.platform,'android')
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 7.5
      - name: Setup dependencies
        run: |
          make ${{ matrix.platform }}-install-dependencies

      - name: Install Inno Setup (for EXE maker)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          choco upgrade innosetup --yes --no-progress
          $iscc = "${env:ProgramFiles(x86)}\Inno Setup 6\ISCC.exe"
          if (-not (Test-Path $iscc)) {
            Throw "ISCC.exe not found at $iscc"
          }
          Write-Host "Inno Setup found at $iscc"

      - name: Setup Android Signing Properties
        if: ${{ inputs.upload-artifact && startsWith(matrix.platform,'android') }}
        run: |
          echo "${{ secrets.ANDROID_SIGNING_KEY }}" | base64 --decode > android/key.jks
          echo "storeFile=$(pwd)/android/key.jks" > android/key.properties
          echo "storePassword=${{ secrets.ANDROID_SIGNING_STORE_PASSWORD }}" >> android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_SIGNING_KEY_ALIAS }}" >> android/key.properties

      - name: Setup Windows Signing Properties
        if: ${{ inputs.upload-artifact && startsWith(matrix.platform,'windows') }}
        run: |
            [IO.File]::WriteAllBytes("windows\sign.pfx", [Convert]::FromBase64String("${{ secrets.WINDOWS_SIGNING_KEY }}"))
            (Get-Content "windows\packaging\msix\make_config.yaml") -replace '^certificate_password:.*$', 'certificate_password: ${{ secrets.WINDOWS_SIGNING_PASSWORD }}' | Set-Content "windows\packaging\msix\make_config.yaml"
        
      # - name: Temporary disable Permission Handler for windows due to its issue in permission
      #   if: ${{ startsWith(matrix.platform,'windows') }}
      #   run: |
      #     (Get-Content -Path "pubspec.yaml") -notmatch "permission_handler" | Set-Content -Path "pubspec.yaml"
      #     (Get-Content -Path "lib\features\profile\add\add_profile_modal.dart") -notmatch "qr_code_scanner_screen" | Set-Content -Path "lib\features\profile\add\add_profile_modal.dart"
      #     (Get-Content -Path lib\features\profile\add\add_profile_modal.dart) -replace 'await QRCodeScannerScreen\(\).open\(context\);', 'null;' | Set-Content -Path lib\features\profile\add\add_profile_modal.dart
      #     Remove-Item -Path "lib\features\common\qr_code_scanner_screen.dart"




      - name: Prepare for ${{ matrix.platform }}
        run: |
          make ${{ matrix.platform }}-prepare
          tree

      - name: Fix exe make_config.yaml icon path (CI, dedupe-safe)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $cfg   = "windows\packaging\exe\make_config.yaml"
          $iconR = "windows\runner\resources\app_icon.ico"
          $iconA = (Resolve-Path (Join-Path $env:GITHUB_WORKSPACE $iconR)).ProviderPath
          if (-not (Test-Path $iconA)) { throw "Icon not found: $iconA" }

          # 1) Читаем YAML как текст
          $txt = Get-Content $cfg -Raw

          # 2) Выпиливаем ВСЕ строки setup_icon_file: ... (на всякий случай)
          $pattern = '(?ms)^\s*setup_icon_file\s*:\s*.*?\r?\n'
          $txt = [regex]::Replace($txt, $pattern, '')

          # 3) Вставляем новую строку после install_dir_name (если он есть), иначе — в конец
          $newline = [Environment]::NewLine
          $lineToAdd = "setup_icon_file: '$iconA'"
          if ($txt -match '^\s*install_dir_name\s*:\s*.*?\r?$', [System.Text.RegularExpressions.RegexOptions]::Multiline) {
            $txt = [regex]::Replace(
              $txt,
              '(^\s*install_dir_name\s*:\s*.*?\r?$)',
              "`$1$newline$lineToAdd",
              [System.Text.RegularExpressions.RegexOptions]::Multiline
            )
          } else {
            $txt = $txt.TrimEnd() + "$newline$lineToAdd$newline"
          }

          # 4) Сохраняем обратно
          Set-Content $cfg -Value $txt -Encoding UTF8

          # 5) Контрольный вывод
          Write-Host "=== Grep make_config.yaml ==="
          Select-String -Path $cfg -Pattern '^(setup_icon_file|install_dir_name)\s*:' -AllMatches | ForEach-Object { $_.Line }


      - name: Build ${{ matrix.platform }}
        env:
          API_TOKEN: ${{ secrets.API_TOKEN }}
          API_URL: ${{ secrets.API_URL }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        run: |
          make ${{ matrix.platform }}-release

      - name: Dump Inno .iss and validate icon/image paths
        if: always() && matrix.platform == 'windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          $iss = Get-ChildItem -Recurse -File -Path "dist" -Filter "*windows-setup_exe.iss" | Select-Object -First 1
          if (-not $iss) { throw "No *windows-setup_exe.iss found under dist/" }
          Write-Host ("ISS file: {0}" -f $iss.FullName)

          # Печать .iss с номерами строк
          $lines = Get-Content -LiteralPath $iss.FullName
          $i=1
          $lines | ForEach-Object { "{0,4}: {1}" -f $i++, $_ } | Out-Host

          # Контекст вокруг 15-й строки
          if ($lines.Length -ge 15) {
            $from = [Math]::Max(1, 15-5)
            $to   = [Math]::Min($lines.Length, 15+5)
            Write-Host ("`n=== Context around line 15 ({0}..{1}) ===" -f $from, $to)
            for ($j=$from; $j -le $to; $j++) { "{0,4}: {1}" -f $j, $lines[$j-1] | Out-Host }
            Write-Host ("`nLine 15 exact: {0}" -f $lines[14])
          }

          function Test-InnoPath([string]$label, [string]$value, [string]$issDir) {
            if (-not $value) { return }
            $p = $value.Trim() -replace '^"+|"+$',''
            if (-not $p) { return }
            $asIs   = (Join-Path $issDir $p)
            $atWs   = (Join-Path $env:GITHUB_WORKSPACE $p)
            $existsAsIs = Test-Path -LiteralPath $asIs
            $existsAtWs = Test-Path -LiteralPath $atWs
            Write-Host ("`n{0} = {1}" -f $label, $p)
            Write-Host (" - as relative to ISS dir: {0} -> exists: {1}" -f $asIs, $existsAsIs)
            Write-Host (" - relative to workspace  : {0} -> exists: {1}" -f $atWs, $existsAtWs)
          }

          # Достаём нужные строки
          $kv = @{
            SetupIconFile        = ($lines | Where-Object { $_ -match '^\s*SetupIconFile\s*=' } | Select-Object -First 1)
            WizardImageFile      = ($lines | Where-Object { $_ -match '^\s*WizardImageFile\s*=' } | Select-Object -First 1)
            WizardSmallImageFile = ($lines | Where-Object { $_ -match '^\s*WizardSmallImageFile\s*=' } | Select-Object -First 1)
          }

          $issDir = $iss.Directory.FullName
          foreach ($k in $kv.Keys) {
            if ($kv[$k]) {
              $val = ($kv[$k] -split '=',2)[1]
              Test-InnoPath $k $val $issDir
            } else {
              Write-Host ("`n{0}: <not present in .iss>" -f $k)
            }
          }

          # Покажем, что указано в make_config.yaml
          $yaml = "windows\packaging\exe\make_config.yaml"
          if (Test-Path $yaml) {
            $yamlLine = Get-Content $yaml | Where-Object { $_ -match '^\s*setup_icon_file\s*:' } | Select-Object -First 1
            if ($yamlLine) {
              $yamlIcon = ($yamlLine -split ':',2)[1].Trim()
              Write-Host ("`nmake_config.yaml -> setup_icon_file: {0}" -f $yamlIcon)
              $yamlAbs1 = Join-Path $issDir $yamlIcon
              $yamlAbs2 = Join-Path $env:GITHUB_WORKSPACE $yamlIcon
              Write-Host (" - as relative to ISS dir: {0} -> exists: {1}" -f $yamlAbs1, (Test-Path $yamlAbs1))
              Write-Host (" - relative to workspace  : {0} -> exists: {1}" -f $yamlAbs2, (Test-Path $yamlAbs2))
            }
          }

      - name: Upload ISS artifact
        if: always() && matrix.platform == 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: windows-iss
          path: dist/**/*windows-setup_exe.iss
          retention-days: 7

      - name: Code Sign
        if: ${{ inputs.upload-artifact && startsWith(matrix.platform,'windows') }}
        uses: Darkmen203/signtool-code-sign-sha256@main
        with:
          certificate: '${{ secrets.WINDOWS_SIGNING_KEY }}'
          cert-password: '${{ secrets.WINDOWS_SIGNING_PASSWORD }}'
          cert-sha1: '${{ secrets.WINDOWS_SIGNING_SHA1 }}'
          folder: 'dist'
          timestamp-server: 'http://timestamp.digicert.com'
          recursive: true
          description: 'RostovVPN'

      - name: Copy to out Windows
        if: matrix.platform == 'windows'
        run: |
          tree
          .\scripts\package_windows.ps1
          
          
      - name: Upload Debug Symbols
        if: ${{ inputs.upload-artifact && inputs.tag-name != 'draft' }}
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SENTRY_DIST: ${{ matrix.platform == 'android-aab' && 'google-play' || 'general' }}
        run: |
          dart pub global activate sentry_dart_plugin
          dart run sentry_dart_plugin 
      
      

              
      - name: Copy to out Android APK
        if: matrix.platform == 'android-apk'
        run: |
          mkdir out
          ls -R ./build/app/outputs
          cp ./build/app/outputs/flutter-apk/*arm64-v8a*.apk out/${TARGET_NAME_apk}-arm64.apk || echo "no arm64 apk"
          cp ./build/app/outputs/flutter-apk/*armeabi-v7a*.apk out/${TARGET_NAME_apk}-arm7.apk || echo "no arm7 apk"
          cp ./build/app/outputs/flutter-apk/*x86_64*.apk out/${TARGET_NAME_apk}-x86_64.apk || echo "no x64 apk"
          cp ./build/app/outputs/flutter-apk/app-release.apk out/${TARGET_NAME_apk}-universal.apk || echo "no universal apk"

      - name: Copy to out Android AAB
        if: matrix.platform == 'android-aab'
        run: |
          mkdir out
          ls -R ./build/app/outputs
          cp ./build/app/outputs/bundle/release/app-release.aab out/rostovvpn-android-market.aab || echo "no aab"

      - name: Copy to out unix
        if: startsWith(matrix.platform,'linux') || matrix.platform == 'macos' || matrix.platform == 'ios'
        run: |
          ls -R dist/
          mkdir out
          mkdir tmp_out
          
          for EXT in $(echo ${{ matrix.targets }} | tr ',' '\n'); do
            KEY=TARGET_NAME_${EXT}
            FILENAME=${!KEY}
            echo "For $EXT ($KEY) filename is ${FILENAME}"
            mv dist/*/*.$EXT tmp_out/${FILENAME}.$EXT
            ls tmp_out
            chmod +x tmp_out/${FILENAME}.$EXT
            if [ "${{matrix.platform}}" == "linux" ];then
              cp ./.github/help/linux/* tmp_out/
            else
              cp ./.github/help/mac-windows/* tmp_out/
            fi
            if [[ "${{matrix.platform}}" == 'ios' ]];then
              echo mv tmp_out/${FILENAME}.$EXT out/
              mv tmp_out/${FILENAME}.$EXT out/
            else
              cd tmp_out
              # 7z a ${FILENAME}.zip ./
              # mv ${FILENAME}.zip ../out/
              # [[ $EXT == 'AppImage' ]]&& mv ${FILENAME}.$EXT ../out/ # added for appimage link
              mv ${FILENAME}.$EXT ../out/
              cd ..
            fi
          done

      - name: Upload Artifact
        if: env.UPLOAD_ARTIFACT == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.platform}}
          path: ./out
          retention-days: 1

      # - name: Clean up keychain and provisioning profile
      #   if: ${{ always() && startsWith(matrix.os,'macos')}}
      #   run: |
      #     security delete-keychain $RUNNER_TEMP/app-signing.keychain-db ||echo ok
      #     rm ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision ||echo ok
  update-draft:
    permissions: write-all
    if: ${{ inputs.upload-artifact }}
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          # by default, it uses a depth of 1
          # this fetches all history so that we can read each commit
          fetch-depth: 0
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          pattern: "*"
          path: ./out/
          

      - name: Display Files Structure
        run: ls -R
        working-directory: ./out

      - name: Delete Current Release Assets
        uses: 8Mi-Tech/delete-release-assets-action@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: 'draft'
          deleteOnlyFromDrafts: false
          
      - name: prepare_release_message
        run: |
          pip install gitchangelog pystache mustache markdown
          prelease=$(curl --silent "https://api.github.com/repos/Darkmen203/RostovVPN/releases/latest" --header "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" | grep -Po '"tag_name": "\K.*?(?=")')
          current="${{ github.ref_name }}"
          sed 's|RELEASE_TAG|${{ env.TAG_NAME }}|g' ./.github/release_message.md > release.md
          echo -e "\n\n<details markdown=1><summary>All changes from $current to the latest commit:</summary>\n\n">>release.md
          gitchangelog "${prelease}.." >> release.md  2>&1 || echo "Error in gitchangelog"
          echo -e "\n\n</details>">>release.md
      - name: Create or Update Draft Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ./out/*
          name: 'draft'
          tag_name: 'draft'
          body_path: './release.md'
          prerelease: true
  upload-release:
    permissions: write-all
    if: ${{ inputs.upload-artifact && inputs.tag-name != 'draft' }}
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          pattern: "*"
          path: ./out/

      - name: Display Files Structure
        run: |
          ls -R ./out
          ls -R ./.github/
          ls -R ./.git/
          mv out/rostovvpn-android-market.aab  rostovvpn-android-market.aab

      - name: prepare_release_message
        run: |
          sed 's|RELEASE_TAG|${{ env.TAG_NAME }}|g' ./.github/release_message.md >> release.md

      - name: Upload Release
        uses: softprops/action-gh-release@v1
        if: ${{ success() }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # prerelease: ${{ env.CHANNEL == 'dev' }}
          prerelease: true
          tag_name: ${{ env.TAG_NAME }}
          body_path: './release.md'
          files: ./out/*

      - name: Create service_account.json
        run: echo '${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}' > service_account.json

      # - name: Deploy to Google Play Internal Testers
      #   uses: r0adkll/upload-google-play@v1
      #   with:
      #     serviceAccountJson: service_account.json
      #     packageName: app.rostovvpn.com
      #     releaseName: ${{ env.TAG_NAME }}
      #     releaseFiles: ./rostovvpn-android-market.aab
      #     track: 'beta'


  # upload-to-testflight:
  #   needs: [build]
  #   if: ${{ inputs.upload-artifact &&  inputs.tag-name != 'draft' }}
  #   #if: ${{ inputs.upload-artifact }}
  #   runs-on: macOS-latest
  #   timeout-minutes: 30
  #   steps:
  #     - name: Download Artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         merge-multiple: true
  #         pattern: "*ios*"
  #         path: ./out/

  #     - uses: Apple-Actions/import-codesign-certs@v2
  #       with:
  #         p12-file-base64: ${{ secrets.APPLE_UPLOAD_CERTIFICATE_P12 }}
  #         p12-password: ${{ secrets.APPLE_CERTIFICATE_P12_PASSWORD }}

  #     - uses: Apple-Actions/download-provisioning-profiles@v1
  #       with:
  #         bundle-id: app.rostovvpn.com
  #         issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
  #         api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
  #         api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
  #     - uses: Apple-Actions/download-provisioning-profiles@v1
  #       with:
  #         bundle-id: app.rostovvpn.com.SingBoxPacketTunnel
  #         issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
  #         api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
  #         api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
  


  #     - name: Import Apple Mobile Provisioning Profile
  #       run: |
  #         mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
  #         echo "${{secrets.APPLE_DIST_PROVISIONING_PROFILES_TARGZ_BASE64}}"|base64 --decode | tar xz -C ~/Library/MobileDevice/Provisioning\ Profiles
  #       #echo "${{secrets.NEW_APPLE_STORE_PROVISIONING_PROFILES_TARXZ_BASE64}}"|base64 --decode | tar xJ -C ~/Library/MobileDevice/Provisioning\ Profiles

  #     - uses: Apple-Actions/upload-testflight-build@v1
  #       with:
  #         app-path: 'out/RostovVPN-iOS.ipa' 
  #         issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
  #         api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
  #         api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
