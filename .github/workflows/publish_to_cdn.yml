name: Publish to CDN

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g. 2.7.44)"
        required: true
  release:
    types: [published]

permissions:
  contents: read

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      S3_ENDPOINT: ${{ vars.S3_ENDPOINT }}
      S3_BUCKET:   ${{ vars.S3_BUCKET }}
      CDN_BASE:    ${{ vars.CDN_BASE }}

    steps:
      - uses: actions/checkout@v4

      # Версия и тег
      - name: Resolve version/tag
        id: meta
        shell: bash
        run: |
          if [[ -n "${{ github.event.release.tag_name }}" ]]; then
            TAG="${{ github.event.release.tag_name }}"
          else
            TAG="v${{ inputs.version }}"
          fi
          VERSION="${TAG#v}"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Resolved: tag=$TAG, version=$VERSION"

      - name: Download release assets
        uses: robinraju/release-downloader@v1.11
        with:
          repository: ${{ github.repository }}
          tag: ${{ steps.meta.outputs.tag }}
          out-file-path: artifacts/${{ steps.meta.outputs.version }}
          fileName: "*"
          tarBall: false
          zipBall: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Подробные логи генератора: где мы находимся, что есть до/после, куда лег latest.json
      - name: Generate latest.json + .sha256 (verbose)
        shell: bash
        run: |
          set -euxo pipefail

          echo "=== ENV SNAPSHOT ==="
          echo "CWD: $(pwd)"
          echo "Node: $(node -v) | npm: $(npm -v)"
          echo "Repo files:"
          ls -la
          echo "Scripts dir:"
          ls -la scripts || true
          echo "Ensure artifacts dir exists:"
          mkdir -p "artifacts/${{ steps.meta.outputs.version }}"
          ls -la "artifacts/${{ steps.meta.outputs.version }}"

          echo "=== RUN GENERATOR ==="
          node --trace-uncaught scripts/gen-latest.mjs \
            "${{ steps.meta.outputs.version }}" \
            "${{ env.CDN_BASE }}" \
            "artifacts/${{ steps.meta.outputs.version }}"
          GEN_RC=$? || true
          echo "Generator exit code: $GEN_RC"

          echo "=== TREE AFTER GENERATION ==="
          find artifacts -maxdepth 4 -printf '%y %p\n' | sort

          echo "=== SEARCH latest.json ANYWHERE ==="
          find . -type f -name 'latest.json' -printf '%p\t%k KiB\n' || true

          exit $GEN_RC

      # Если latest.json оказался не там — найти и скопировать в artifacts/latest.json
      - name: Normalize latest.json location (with logs)
        shell: bash
        run: |
          set -euo pipefail
          echo "Try artifacts/latest.json directly:"
          if [[ -f "artifacts/latest.json" ]]; then
            echo "OK: artifacts/latest.json already exists"
          else
            echo "Searching for latest.json under repo..."
            GEN_OUT="$(find . -type f -name 'latest.json' | head -n1 || true)"
            if [[ -n "${GEN_OUT:-}" ]]; then
              echo "Found at: $GEN_OUT"
              mkdir -p artifacts
              cp -f "$GEN_OUT" "artifacts/latest.json"
              echo "Copied to artifacts/latest.json"
            else
              echo "ERROR: latest.json not found after generation"
              echo "--- artifacts tree ---"
              find artifacts -maxdepth 4 -printf '%y %p\n' | sort || true
              exit 1
            fi
          fi
          echo "--- show artifacts dir ---"
          ls -la artifacts
          echo "--- head of latest.json ---"
          head -c 2000 artifacts/latest.json || true
          echo
          echo "--- sha256 of latest.json ---"
          sha256sum artifacts/latest.json || shasum -a 256 artifacts/latest.json || true

      - name: Check AWS CLI
        run: aws --version

      - name: Upload versioned files (long cache)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ru-central1
          AWS_EC2_METADATA_DISABLED: "true"
        run: |
          echo "Uploading artifacts for version ${{ steps.meta.outputs.version }}:"
          find "artifacts/${{ steps.meta.outputs.version }}" -maxdepth 1 -type f -printf '%p (%k KiB)\n' | sort
          aws s3 cp "artifacts/${{ steps.meta.outputs.version }}/" "s3://${{ env.S3_BUCKET }}/releases/${{ steps.meta.outputs.version }}/" \
            --recursive \
            --exclude "Source code*" \
            --endpoint-url "${{ env.S3_ENDPOINT }}" \
            --cache-control "public, max-age=31536000, immutable"
          echo "List uploaded objects:"
          aws s3 ls "s3://${{ env.S3_BUCKET }}/releases/${{ steps.meta.outputs.version }}/" --endpoint-url "${{ env.S3_ENDPOINT }}" || true

      - name: Upload latest.json (short cache)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ru-central1
          AWS_EC2_METADATA_DISABLED: "true"
        run: |
          echo "Uploading artifacts/latest.json -> s3://${{ env.S3_BUCKET }}/releases/latest.json"
          aws s3 cp "artifacts/latest.json" "s3://${{ env.S3_BUCKET }}/releases/latest.json" \
            --endpoint-url "${{ env.S3_ENDPOINT }}" \
            --cache-control "public, max-age=60, s-maxage=300, must-revalidate"
          echo "Check object exists:"
          aws s3 ls "s3://${{ env.S3_BUCKET }}/releases/latest.json" --endpoint-url "${{ env.S3_ENDPOINT }}" || true

      # Purge CDN через сервисный аккаунт + yc CLI
      - name: Purge CDN cache for latest.json (yc CLI)
        env:
          YC_SA_KEY_JSON: ${{ secrets.YC_SA_KEY_JSON }}
          YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
          CDN_RESOURCE_ID: ${{ secrets.CDN_RESOURCE_ID }}
        shell: bash
        run: |
          set -euxo pipefail
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          printf '%s' "$YC_SA_KEY_JSON" > sa.json
          ~/yandex-cloud/bin/yc config set service-account-key sa.json
          ~/yandex-cloud/bin/yc config set cloud-id  "$YC_CLOUD_ID"
          ~/yandex-cloud/bin/yc config set folder-id "$YC_FOLDER_ID"
          echo "Purging CDN path: /releases/latest.json"
          ~/yandex-cloud/bin/yc cdn cache purge --resource-id "$CDN_RESOURCE_ID" --path "/releases/latest.json"
